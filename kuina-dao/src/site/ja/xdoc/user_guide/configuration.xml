<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Kuina-Daoユーザ・ガイド - コンフィグレーション</title>
	</properties>
	<body>
		<section name="コンフィグレーション">
			<p>
				ここでは，Kuina-Daoで複数の永続ユニットを使用する場合や，Kuina-Daoをカスタマイズする方法について説明します．
			</p>
			<ul>
				<li><p><a href="#異なった構成を持つ複数の永続ユニットの使用">異なった構成を持つ複数の永続ユニットの使用</a></p></li>
				<li><p><a href="#同一の構成を持つ複数の永続ユニットの使用">同一の構成を持つ複数の永続ユニットの使用</a></p></li>
				<li><p><a href="#Kuina-Daoのカスタマイズ">Kuina-Daoのカスタマイズ</a></p></li>
			</ul>			
			<subsection name="異なった構成を持つ複数の永続ユニットの使用">
				<p>
					異なった構成をもつ複数の永続ユニットを使用するには，以下の命名規約とパッケージ構成に従うことを推奨します．
					推奨する命名規約とパッケージ構成に従うと，エンティティとマッピングファイルは対応する永続ユニットに自動的に登録されます．
				</p>
				
				<dl>
					<dt>推奨する命名規約</dt>
					<dd>
						<p>
							永続ユニット名は&quot;<code>persistenceUnit</code>&quot;，
							もしくは&quot;<var>任意のプレフィックス</var><code>PersistenceUnit</code>&quot;とする．
						</p>
						<p>
							マッピングファイル名は&quot;<var>任意のプレフィックス</var><code>Orm.xml</code>&quot;とする．
						</p>
					</dd>					
					<dt>推奨するパッケージ構成</dt>
					<dd>
						<p>
							永続ユニット&quot;<code>persistenceUnit</code>&quot;に属するエンティティは
							<var>ルートパッケージ</var><code>.entity</code>に配置する．
						</p>
						<p>
							永続ユニット&quot;<var>任意のプレフィックス</var><code>PersistenceUnit</code>&quot;に属するエンティティは
							<var>ルートパッケージ</var><code>.entity</code>.<var>任意のプレフィックス</var>に配置する．
						</p>
						<p>
							永続ユニット&quot;<code>persistenceUnit</code>&quot;に属するマッピングファイルは
							<var>ルートパッケージ</var><code>.entity</code>，もしくは<var>ルートパッケージ</var><code>.dao</code>に配置する．
						</p>
						<p>
							永続ユニット&quot;<var>任意のプレフィックス</var><code>PersistenceUnit</code>&quot;に属するマッピングファイルは
							<var>ルートパッケージ</var><code>.entity</code>.<var>任意のプレフィックス</var>，
							もしくは<var>ルートパッケージ</var><code>.dao</code>.<var>任意のプレフィックス</var>に配置する．
						</p>
					</dd>
				</dl>				
				<h4>例</h4>								
				<p>
					&quot;<code>persistenceUnit</code>&quot;という名称の永続ユニットと
					&quot;<code>hogePerisitenceUnit</code>&quot;という名称の永続ユニットがそれぞれ存在する場合，
					推奨されるパッケージ構成は次のようになります．
					この例でのルートパッケージは<code>kuina.dao.examle</code>とします．
					Emp.class，Dept.class，Sales.classはエンティティとします．
					また，登場するxmlファイルはすべてJPAのマッピングファイルとします．
				</p>	
				<ul>
					<li><p><code>kuina.dao.examle.dao.EmpDao.class</code></p></li>
					<li><p><code>kuina.dao.examle.dao.EmpOrm.xml</code></p></li>
					<li><p><code>kuina.dao.examle.dao.DeptDao.class</code></p></li>
					<li><p><code>kuina.dao.examle.dao.DeptOrm.xml</code></p></li>
					<li><p><code>kuina.dao.examle.dao.hoge.SalesDao.class</code></p></li>
					<li><p><code>kuina.dao.examle.dao.hoge.SalesOrm.xml</code></p></li>
					<li><p><code>kuina.dao.examle.entity.Emp.class</code></p></li>
					<li><p><code>kuina.dao.examle.entity.Dept.class</code></p></li>
					<li><p><code>kuina.dao.examle.entity.hoge.Sales.class</code></p></li>						
				</ul>
				<p>
					<code>EmpOrm.xml</code>，<code>DeptOrm.xml</code>，<code>Emp.class</code>，
					<code>Dept.class</code>が永続ユニット<code>persistenceUnit</code>に登録されます．
					残りの，<code>SalesOrm.xml</code>，<code>Sales.class</code>が
					永続ユニット<code>hogePerisitenceUnit</code>に登録されます．
				</p>				
			</subsection>
			<subsection name="同一の構成を持つ複数の永続ユニットの使用">
				<p>
					同一の構成を持つ複数の永続ユニットを作成する場合，エンティティやDAOを共有したままコンテキストに応じて
					データベースの接続先を切り替えることができます．
				</p>
				<p>
					推奨する命名規約とパッケージ構成に従えば，エンティティとマッピングファイルは対応する永続ユニットに
					自動的に登録されます．
				</p>
				<dl>
					<dt>推奨する命名規約</dt>
					<dd>
						<p>
							永続ユニット名は&quot;<code>persistenceUnit</code>&quot;以外とする．
						</p>
						<p>
							マッピングファイル名は&quot;<var>任意のプレフィックス</var><code>Orm.xml</code>&quot;とする．
						</p>
					</dd>					
					<dt>推奨するパッケージ構成</dt>
					<dd>
						<p>
							エンティティは<var>ルートパッケージ</var><code>.entity</code>に配置する．
						</p>
						<p>
							マッピングファイルは<var>ルートパッケージ</var><code>.entity</code>，
							もしくは<var>ルートパッケージ</var><code>.dao</code>に配置する．
						</p>
					</dd>
				</dl>				
				
				<h4>推奨する設定ファイル定義例</h4>
				<p>
					まずデータベースの接続先ごとにデータソースの設定を行います．
					この例ではH2とDerbyを使います．
					データベースごとの設定ファイルとそれを束ねるひとつの設定ファイルを用意します．
				</p>
				<ul>
					<li><p><code>h2-jdbc.dicon</code></p></li>
					<li><p><code>derby-jdbc.dicon</code></p></li>
					<li><p><code>jdbc.dion</code></p></li>
				</ul>
				<p>
					それぞれのファイルの定義は以下のようになります．
					設定上の注意点は太字にしています．
					一部定義を省略しています．
				</p>
				<h5>h2-jdbc.dicon</h5>
				<p>
					<code>namespace</code>には&quot;<code>jdbc</code>&quot;を指定します．
					<code>DataSource</code>を表すコンポーネントの名前は
					&quot;<var>任意のプレフィックス</var><code>DataSource</code>&quot;にする必要があります．
					ここでは&quot;<code>h2DataSource</code>&quot;とします．
				</p>
<source>
&lt;components namespace="<b>jdbc</b>"&gt;
  &lt;include path="jta.dicon"/&gt;
  &lt;include path="jdbc-extension.dicon"/&gt;
  
  ...（略）...

  &lt;component name="<b>h2DataSource</b>"
    class="org.seasar.extension.dbcp.impl.DataSourceImpl"
  /&gt;
&lt;/components&gt;
</source>
				<h5>derby-jdbc.dicon</h5>
				<p>
					<code>namespace</code>には&quot;<code>jdbc</code>&quot;を指定します．
					<code>DataSource</code>を表すコンポーネントの名前は
					&quot;<var>任意のプレフィックス</var><code>DataSource</code>&quot;にする必要があります．
					ここでは&quot;<code>derbyDataSource</code>&quot;とします．
				</p>
<source>
&lt;components namespace="<b>jdbc</b>"&gt;
  &lt;include path="jta.dicon"/&gt;
  &lt;include path="jdbc-extension.dicon"/&gt;

  ...（略）...

  &lt;component name="<b>derbyDataSource</b>"
    class="org.seasar.extension.dbcp.impl.DataSourceImpl"
  /&gt;

&lt;/components&gt;
</source>
				<h5>jdbc.dicon</h5>
				<p>
					データベースごとに用意した設定ファイルをインクルードします．
					<code>namespace</code>には&quot;<code>jdbc</code>&quot;を指定します．
					<code>SelectableDataSourceProxy</code>を定義しコンポーネントの名前は
					&quot;<code>dataSource</code>&quot;とします．
				</p>
<source>
&lt;components namespace="<b>jdbc</b>"&gt;
  &lt;include path="h2-jdbc.dicon"/&gt;
  &lt;include path="derby-jdbc.dicon"/&gt;

  &lt;component name="<b>dataSource</b>"
    class="<b>org.seasar.extension.datasource.impl.SelectableDataSourceProxy</b>"/&gt;

&lt;/components&gt;
</source>
				<p>
					次に永続ユニットごとの設定を用意します．
				</p>
				<ul>
					<li><p><code>persistence.xml</code></p></li>
					<li><p><code>jpa.dicon</code></p></li>
					<li><p><code>h2-jpa.dicon</code></p></li>
					<li><p><code>derby-jpa.dicon</code></p></li>
				</ul>
				<p>
					それぞれの設定ファイルは以下のようになります
					(この例はJPA実装にHibernateを使う場合の設定です)．
				</p>
				<h5>persistence.xml</h5>
				<p>
					永続ユニットを複数定義します．
					接続先のデータベースは自動的に切り替えるのでデータソースは同じ名前でかまいません．
				</p>
<source>
&lt;persistence&gt;
  &lt;persistence-unit name="<b>h2PersistenceUnit</b>" transaction-type="JTA"&gt;
    &lt;jta-data-source&gt;dataSourceProxy&lt;/jta-data-source&gt;
    ...（略）...
  &lt;/persistence-unit&gt;

  &lt;persistence-unit name="<b>derbyPersistenceUnit</b>" transaction-type="JTA"&gt;
    &lt;jta-data-source&gt;dataSourceProxy&lt;/jta-data-source&gt;
    ...（略）...
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;    
</source>
				<h5>h2-jpa.dicon</h5>
				<p>
					永続ユニット<code>h2PersistenceUnit</code>用の設定ファイルです．
				</p>
				<p>
					<code>jpa.persistenceUnitManager.getEntityManagerFactory</code>の最初の引数には
					Seasar2でのデフォルトの永続ユニット名である<code>persistenceUnit</code>を，
					2番目の引数には実際の永続ユニットである<code>h2PersistenceUnit</code>を渡します．
					最初の引数からエンティティとマッピングファイルが自動で検出され，
					2番目の引数の永続ユニットにエンティティとマッピングファイルが登録されます．
				</p>
				<p>	
					<code>EntityManager</code>を表すコンポーネントの名前は
					&quot;<var>対応するデータソースのプレフィックス</var><code>EntityManager</code>&quot;にする必要があります．
				</p>
<source>
&lt;components&gt;
  &lt;include path="s2hibernate-jpa.dicon"/&gt;

  &lt;component name="h2EntityManagerFactory" class="javax.persistence.EntityManagerFactory"&gt;
    jpa.persistenceUnitManager.getEntityManagerFactory("<b>persistenceUnit</b>", "<b>h2PersistenceUnit</b>")
  &lt;/component&gt;

  &lt;component name="<b>h2EntityManager</b>" class="org.seasar.framework.jpa.impl.TxScopedEntityManagerProxy"/&gt;

  &lt;component class="org.seasar.hibernate.jpa.metadata.HibernateEntityDescProvider"/&gt;
  
  &lt;component name="dataSourceProxy" class="org.seasar.extension.datasource.impl.SingletonDataSourceProxy"/&gt;

&lt;/components&gt;
</source>
				<h5>derby-jpa.dicon</h5>
				<p>
					永続ユニット<code>derbyPersistenceUnit</code>用の設定ファイルです．
				</p>	
					<code>jpa.persistenceUnitManager.getEntityManagerFactory</code>の最初の引数には
					Seasar2でのデフォルトの永続ユニット名である<code>persistenceUnit</code>を，
					2番目の引数には実際の永続ユニットである<code>derbyPersistenceUnit</code>を渡します．
					最初の引数からエンティティとマッピングファイルが自動で検出され，
					2番目の引数の永続ユニットにエンティティとマッピングファイルが登録されます．
				<p>	
					<code>EntityManager</code>を表すコンポーネントの名前は
					&quot;<var>対応するデータソースのプレフィックス</var><code>EntityManager</code>&quot;にする必要があります．
				</p>
<source>
&lt;components&gt;
  &lt;include path="s2hibernate-jpa.dicon"/&gt;

  &lt;component name="derbyEntityManagerFactory" class="javax.persistence.EntityManagerFactory"&gt;
    jpa.persistenceUnitManager.getEntityManagerFactory("<b>persistenceUnit</b>", "<b>derbyPersistenceUnit</b>")
  &lt;/component&gt;

  &lt;component name="<b>derbyEntityManager</b>" class="org.seasar.framework.jpa.impl.TxScopedEntityManagerProxy"/&gt;

  &lt;component class="org.seasar.hibernate.jpa.metadata.HibernateEntityDescProvider"/&gt;

  &lt;component name="dataSourceProxy" class="org.seasar.extension.datasource.impl.SingletonDataSourceProxy"/&gt;
  
&lt;/components&gt;
</source>
				<h5>jpa.dicon</h5>
				<p>
					永続ユニットごとに用意した設定ファイルをインクルードします．
					<code>SelectableEntityManagerProxy</code>を定義しコンポーネントの名前は
					&quot;<code>entityManager</code>&quot;とします．
				</p>
<source>
&lt;components&gt;
  &lt;include path="h2-jpa.dicon"/&gt;
  &lt;include path="derby-jpa.dicon"/&gt;
  
  &lt;component name="<b>entityManager</b>" class="<b>org.seasar.framework.jpa.impl.SelectableEntityManagerProxy</b>"/&gt;

&lt;/components&gt;
</source>
				<h4>実行方法</h4>
				<p>
					コンテキストを指定して接続先のデータベースを切り替えるには
					<code>org.seasar.extension.datasource.DataSourceFactory</code>コンポーネントの
					<code>setSelectableDataSourceName(String)</code>メソッドに，
					<var>データソースのプレフィックス</var>を引数として渡して実行します．
				</p>
				<p>
					例えば，上記の定義に従った場合，Derbyに接続するには<code>setSelectableDataSourceName("derby")</code>を呼び出し，
					H2に接続するには<code>setSelectableDataSourceName("h2")</code>を呼び出します.
				</p>
				<p>
					値を設定する場所としては，Servelet FilterやAOPのロジックが適しています．<br/>
				</p>
			</subsection>
			<subsection name="Kuina-Daoのカスタマイズ">
				<p>
					Kuina-Daoが提供するインターフェースを実装したクラスを作成し設定ファイルを適切に定義することでKuina-Daoをカスタマイズできます．
					たとえば，新しい機能を追加する場合次の作業が必要です．
				</p>
				<ul>
					<li>org.seasar.kuina.dao.internal.Commandインターフェースの実装クラスを作成する．</li>
					<li>org.seasar.kuina.dao.internal.CommandBuilderインターフェースの実装クラスを作成する．</li>
					<li>kuina-dao-builder.diconをコピーした設定ファイルにCommandBuilderの実装クラスを登録する．</li>
					<li>s2container.diconに上記で新しく作成した設定ファイルを使用することを指定する．</li>
				</ul>
				<h4>設定例</h4>
				
				<h5><code>org.seasar.kuina.dao.internal.Command</code>の実装クラスの作成</h5>
				<p>
					<code>Command</code>インタフェースを実装するクラスを作成しDAOメソッドに適応したい処理を記述します．
					このクラスでは<code>EntityManager</code>に対し問い合わせや更新などを実行できます．
				</p>
				<p>
					<code>execute</code>メソッドの戻り値はDAOメソッドの戻り値となります．
					DAOメソッドが戻り値を持たない場合，<code>execute</code>メソッドでは<code>null</code>を返してください．
				</p>
<source>
public class HogeCommand <b>implements Command</b> {
  public Object execute(EntityManager em, Object[] arguments) {
    ...
    return null;
  }
}
</source>
				<h5><code>org.seasar.kuina.dao.internal.CommandBuilder</code>の実装クラスの作成</h5>
				<p>
					<code>CommandBuilder</code>インターフェースを実装するクラスを作成し<code>Command</code>を生成するための処理を記述します．
				</p>	
				<p>
					<code>build</code>メソッドはDAOメソッドのシグネチャ等の情報から対応する<code>Command</code>を生成します．
					生成しない場合は<code>null</code>を返してください．
				</p>
<source>
public class HogeCommandBuilder <b>implements CommandBuilder</b> {
  public Command build(Class&lt;?&gt; daoClass, Method method) {
    if (!method.getName().startsWith("hoge")) {
      return null;
    }
    ...
    return new HogeCommand();
  }
}
</source>
				<h5><code>kuina-dao-builder.dicon</code>のコピーの作成</h5>
				<p>
					<code>kuina-dao-<var>x.x.x</var>.jar</code>に同梱されている<code>kuina-dao-builder.dicon</code>をコピーしてカスタマイズ用の設定ファイルを作成し，
					新規に作成した<code>CommandBuilder</code>を登録します．
				</p>
				
				<p>
					たとえば，コピーしたファイルを<code>my-kuina-dao-builder.dicon</code>という名前にし
					次のように新しい<code>CommandBuilder</code>を定義します．
				</p>
<source>
&lt;components namespace="kuinaDaoBuilder"&gt;
  &lt;include path="convention.dicon"/&gt;
  &lt;include path="javaee5.dicon"/&gt;

  &lt;component class="org.seasar.kuina.dao.internal.metadata.DaoMetadataFactoryImpl"/&gt;
  &lt;component instance="prototype" class="org.seasar.kuina.dao.internal.metadata.DaoMetadataImpl"/&gt;

  &lt;component class="org.seasar.kuina.dao.internal.builder.SqlCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.SqlUpdateCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.NamedQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.NamedQueryUpdateCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.FindAllQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.ExampleQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.DtoQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.ParameterQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.ConditionalQueryCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.FindCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.GetReferenceCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.ContainsCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.PersistCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.RemoveCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.MergeCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.RefreshCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.ReadLockCommandBuilder"/&gt;
  &lt;component class="org.seasar.kuina.dao.internal.builder.WriteLockCommandBuilder"/&gt;
  <b>&lt;component class="kuina.dao.example.HogeCommandBuilder"/&gt;</b>
&lt;/components&gt;
</source>				
				<h5><code>s2container.diconの設定</code></h5>
				<p>	
					S2Containerの振る舞いを制御する設定ファイルである<code>s2container.dicon</code>で
					<code>kuina-dao-builder.dicon</code>の替わりにカスタマイズ用の設定ファイルを使用することを指定します．
				</p>
				<p>	
					カスタマイズ用の設定ファイルが<code>my-kuina-dao-builder.dicon</code>という名前である場合，次のように記述します．
				</p>
<source>
&lt;components&gt;
    &lt;include condition="#ENV == 'ut'" path="hotdeploy.dicon"/&gt;
    &lt;include condition="#ENV != 'ut'" path="cooldeploy.dicon"/&gt;

    &lt;component class="org.seasar.framework.container.factory.SimplePathResolver"&gt;
        &lt;initMethod name="addRealPath"&gt;
            &lt;arg&gt;"<b>kuina-dao-builder.dicon</b>"&lt;/arg&gt;
            &lt;arg&gt;"<b>my-kuina-dao-builder.dicon</b>"&lt;/arg&gt;
        &lt;/initMethod&gt;
    &lt;/component&gt;
&lt;/components&gt;
</source>						
			</subsection>						
		</section>
	</body>
</document>
